		
		//http.authorizeRequests().antMatchers("/admin/**").access("hasRole('ADMIN','USER')").and()
		/*http.formLogin().loginPage("/login").failureUrl("/fail2login").defaultSuccessUrl("/welcome").usernameParameter("username").passwordParameter("password").and()
		.logout().logoutSuccessUrl("/logoutSuccess").invalidateHttpSession(true).and()
		.exceptionHandling().accessDeniedPage("/403").and()
		.csrf().disable();*/
		
	      http.authorizeRequests()
	      .antMatchers("/home/**").permitAll() 
	      .antMatchers("/welcome/**").permitAll()
	      .antMatchers("/test/**").permitAll()
	      .antMatchers("/login**").permitAll();
	      
	      
	      http
	      .formLogin()
	      .loginPage("/login") // Specifies the login page URL
	      //.loginProcessingUrl("/welcome") // Specifies the URL,which is used 
	                                     //in action attribute on the <from> tag
	      .usernameParameter("username")  // Username parameter, used in name attribute
	                                    // of the <input> tag. Default is 'username'.
	      .passwordParameter("password")  // Password parameter, used in name attribute
	                                    // of the <input> tag. Default is 'password'.
	      .successHandler((req,res,auth)->{    //Success handler invoked after successful authentication
	         System.out.println("inside success handler");
	    	  for (GrantedAuthority authority : auth.getAuthorities()) {
	            System.out.println(authority.getAuthority());
	         }
	         System.out.println(auth.getName());
	         res.sendRedirect("/validate"); // Redirect user to index/home page
	      })
//	    .defaultSuccessUrl("/")   // URL, where user will go after authenticating successfully.
	                                // Skipped if successHandler() is used.
	      .failureHandler((req,res,exp)->{  // Failure handler invoked after authentication failure
	         String errMsg="";
	         if(exp.getClass().isAssignableFrom(BadCredentialsException.class)){
	            errMsg="Invalid username or password.";
	         }else{
	            errMsg="Unknown error - "+exp.getMessage();
	         }
	         req.getSession().setAttribute("message", errMsg);
	         res.sendRedirect("/login"); // Redirect user to login page with error message.
	      })
//	    .failureUrl("/login?error")   // URL, where user will go after authentication failure.
	                                    //  Skipped if failureHandler() is used.
	      .permitAll() // Allow access to any URL associate to formLogin()
	      .and()
	      .logout()
	      .logoutUrl("/signout")   // Specifies the logout URL, default URL is '/logout'
	      .logoutSuccessHandler((req,res,auth)->{   // Logout handler called after successful logout 
	         req.getSession().setAttribute("message", "You are logged out successfully.");
	         res.sendRedirect("/logout"); // Redirect user to login page with message.
	      })
//	    .logoutSuccessUrl("/login") // URL, where user will be redirect after
	                                  // successful logout. Ignored if logoutSuccessHandler() is used.
	      .permitAll() // Allow access to any URL associate to logout()
	      .and()
	      .csrf().disable(); // Disable CSRF support
	}
